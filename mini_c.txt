%% summary

The following grammar describes a subset of the C programming language with
support for

- Primitive types
- Variables
- Binary operations
- Functions

Of course, feel free to extend this as you like. Later on in the course, we will
add more constructs.

%% extensions

Grammar extensions:

    - <T>* means 0 or more of <T>
    - <T>+ means 1 or more of <T>
    - "T"  means T literally
    - (<T> | <U> | <V>) means one of <T>, <U>, or <V>

%% grammar

<program> -> <top_level_stmt>*

<top_level_stmt> -> <decl> | <function>

<decl> -> <type> <id> ";" | <type> <id> "=" <expr> ";"

<function> -> <type> <id> "(" <param>* ")" <block>

<type> -> "char" | "int" | "long" | "float" | "double" | <type>"*"

<id> -> ("_" | <letter>) ("_" | <letter> | <digit>)*

<block> -> "{" <stmt>* "}"

<stmt> -> <block> | <decl> | <expr>";"

<expr> -> <id> | <number> | <char> | <string> | <expr> <binary_op> <expr>

<binary_op> -> "="
             | "+" | "-" | "*" | "/" | "%"
             | "+=" | "-=" | "*=" | "/=" | "%="
             | "^" | "&" | "|"
             | "||" | "&&"
             | "<<" | ">>"

<letter> -> "a" | ... | "z" | "A" | ... | "Z"

<number> -> <int> | <float>

<char> -> "'" <ch> "'"

<string> -> """ <ch>* """

<int> -> <digit>+

<float> -> <digit>+ "." <digit>*

<digit> -> "0" | ... | "9"

<ch> -> an arbitrary character
